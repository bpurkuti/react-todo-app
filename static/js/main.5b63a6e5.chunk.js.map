{"version":3,"sources":["components/TodoForm.tsx","components/Todo.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoForm","Props","useState","todo","setTodo","onSubmit","event","preventDefault","addTodo","Math","random","toFixed","className","type","placeholder","value","onChange","e","target","Todo","completed","onClick","toggleComplete","id","text","handleRemove","TodoList","initialTodos","todos","setTodos","filter","setFilter","toggleJson","setToggleJson","prevState","map","length","newTodo","checked","defaultChecked","JSON","stringify","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b63a6e5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\ninterface Props {\r\n    addTodo: AddTodo;\r\n}\r\nconst TodoForm: React.FC<Props> = Props => {\r\n    const [todo, setTodo] = useState(\"\");\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        Props.addTodo(todo, Math.random().toFixed(5), false);\r\n        setTodo(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            <input\r\n                className=\"search_bar\"\r\n                type='text'\r\n                placeholder=\"Your Todos\"\r\n                value={todo}\r\n                onChange={e => setTodo(e.target.value)}\r\n            />\r\n\r\n            <button className=\"search_btn\" type=\"submit\" > Add</button>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n    text: string\r\n    id: string\r\n    completed: boolean\r\n    toggleComplete: ToggleComplete\r\n    handleRemove: HandleRemove\r\n\r\n\r\n}\r\n\r\n\r\nconst Todo: React.FC<Props> = (Props) => {\r\n    return (\r\n        <div className=\"todo_container\">\r\n            <div>\r\n                <li className={Props.completed ? (\"complete\") : (\"\")} onClick={() => Props.toggleComplete(Props.id)} >\r\n                    {Props.text}\r\n                </li>\r\n                <button className=\"todo_btns\" onClick={() => Props.toggleComplete(Props.id)}> Complete</button>\r\n                <button className=\"todo_btns\" onClick={() => Props.handleRemove(Props.id)}> Remove </button>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react'\r\nimport '../styles.css';\r\nimport TodoForm from './TodoForm'\r\nimport initialTodos from '../Data/initialTodos.json';\r\nimport Todo from './Todo';\r\n\r\n\r\n\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useState(initialTodos);\r\n    const [filter, setFilter] = useState('Show All');\r\n    const [toggleJson, setToggleJson] = useState(false);\r\n\r\n    const addTodo = (text: string, id: string, completed: boolean) => {\r\n        if (!text.length) {\r\n            return;\r\n        }\r\n        const newTodo = { text, id, completed };\r\n        setTodos((prevState) => [newTodo, ...prevState]);\r\n\r\n    }\r\n\r\n    const toggleComplete = (id: string) => {\r\n        setTodos((prevState) =>\r\n            prevState.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        //Same as \r\n                        // text: todo.text,\r\n                        // id: todo.id,\r\n                        // completed: !todo.completed\r\n                        ...todo, completed: !todo.completed\r\n                    };\r\n                }\r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    const completeAll = () => {\r\n        todos.map(todo => (todo.completed) ? (\"\") : toggleComplete(todo.id));\r\n\r\n    }\r\n\r\n    const handleRemove = (id: string) => {\r\n        //todo..\r\n        setTodos((prevState) => prevState.filter(todo => todo.id !== id));\r\n\r\n    }\r\n\r\n    const removeAllCompleted = () => {\r\n        //todo..\r\n        todos.map(todo => (todo.completed) ? (handleRemove(todo.id)) : (\"\"))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h3>\r\n                Add your shopping list, reminders and rest of the things to do in one neat place\r\n            </h3>\r\n            <TodoForm addTodo={addTodo} />\r\n\r\n            <div className=\"filter_name\"> Todos Left: {todos.filter(todo => !todo.completed).length} </div>\r\n\r\n            <div className='btns_1'>\r\n                <button onClick={() => setFilter(\"Show All\")}> Show All </button>\r\n                <button onClick={() => setFilter(\"Show Active\")}> Show Active </button>\r\n                <button onClick={() => setFilter(\"Show Complete\")}> Show Completed </button>\r\n            </div>\r\n\r\n            <div className=\"btns_2\">\r\n                {(todos.length > 0) ? (<button onClick={completeAll}> Complete All </button>) : (\"\")}\r\n\r\n                {(todos.filter(todo => todo.completed).length > 0) ? (<button onClick={removeAllCompleted}> Remove Completed </button>) : (\"\")}\r\n\r\n\r\n            </div>\r\n\r\n            <h4 className=\"filter_name\"> Filter: {filter}</h4>\r\n\r\n            {filter === \"Show All\" ?\r\n                (todos.map(todo =>\r\n                    <Todo\r\n                        key={todo.id}\r\n                        id={todo.id}\r\n                        completed={todo.completed}\r\n                        toggleComplete={toggleComplete}\r\n                        handleRemove={handleRemove}\r\n                        text={todo.text} />\r\n                )) :\r\n                (filter === \"Show Active\" ?\r\n                    (todos.filter(todo => !todo.completed).map(todo =>\r\n                        <Todo\r\n                            key={todo.id}\r\n                            id={todo.id}\r\n                            completed={todo.completed}\r\n                            toggleComplete={toggleComplete}\r\n                            handleRemove={handleRemove}\r\n                            text={todo.text} />\r\n                    )) :\r\n                    (todos.filter(todo => todo.completed).map(todo =>\r\n                        <Todo\r\n                            key={todo.id}\r\n                            id={todo.id}\r\n                            completed={todo.completed}\r\n                            toggleComplete={toggleComplete}\r\n                            handleRemove={handleRemove}\r\n                            text={todo.text} />\r\n                    )))}\r\n\r\n\r\n            {/* Json representation */}\r\n\r\n            <div>\r\n                Json Representation\r\n                <input type=\"checkbox\" onClick={() => setToggleJson(!toggleJson)} checked={toggleJson} defaultChecked />\r\n            </div>\r\n\r\n            {toggleJson ? (<div className=\"show_json\">\r\n\r\n                {filter === \"Show All\" ?\r\n                    (<p id=\"json\"><pre> {JSON.stringify(todos, null, 2)} </pre></p>) :\r\n                    (filter === \"Show Active\" ?\r\n                        (\r\n                            <p id=\"json\"><pre> {JSON.stringify(todos.filter(todo => !todo.completed), null, 2)} </pre></p>\r\n                        ) :\r\n                        (\r\n                            <p id=\"json\"><pre> {JSON.stringify(todos.filter(todo => todo.completed), null, 2)} </pre></p>\r\n                        )\r\n                    )\r\n                }\r\n\r\n            </div>) : (\"\")}\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}